import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.utils.markdown import hbold, hitalic
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from config_reader import config
import asyncio

logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.bot_token.get_secret_value())
dp = Dispatcher(storage=MemoryStorage())

class DressStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_photo = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = [
        [types.KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∫–∞")],
        [types.KeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è"),
        types.KeyboardButton(text="–Ø–∑—ã–∫")]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True # –¥–ª—è –±–æ–ª–µ–µ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    )
    await message.answer(f"{hbold('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! üëã')}"
                         "\n\n–≠—Ç–æ –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —à–æ–ø–ø–∏–Ω–≥—É! üß•‚ú®"
                         "\n–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –≤–µ—â–∏ ‚Äî –∏ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ—ë –¥–µ—Ç–∞–ª—å–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É"
                         f"\n\n{hbold('–ü–æ–ø—Ä–æ–±—É–π —Å–µ–π—á–∞—Å ‚Äî –∑–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ! üì∏')}",
                         reply_markup=keyboard,
                         parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∫–∞"
@dp.message(F.text == "–ó–∞–≥—Ä—É–∑–∫–∞")
async def handle_upload(message: types.Message, state: FSMContext):
    await state.set_state(DressStates.waiting_for_photo)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–π –æ–¥–µ–∂–¥—ã")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
@dp.message(F.photo, DressStates.waiting_for_photo)
async def handle_photo(message: types.Message, state: FSMContext):
    buttons = [
        [
            types.InlineKeyboardButton(text="–î–∞", callback_data="ph_yes"),
            types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="ph_no")
        ]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(
        "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –¢—É—Ç –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ–¥–µ–∂–¥—ã\n–ù–∞–∑–≤–∞–Ω–∏–µ:\n[—Ü–≤–µ—Ç] –ø–ª–∞—Ç—å–µ [–¥–∞—Ç–∞]\n–ò–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=keyboard
    )
    await state.clear()

# –í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –¥–ª—è —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–µ–∑ –Ω–∞–∂–∞—Ç–∏—è "–ó–∞–≥—Ä—É–∑–∫–∞"
@dp.message(F.photo)
async def handle_incorrect_photo(message: types.Message):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–≥—Ä—É–∑–∫–∞' —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ñ–æ—Ç–æ
@dp.callback_query(F.data.startswith("ph_"))
async def handle_photo_callback(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[1]
    if action == "yes":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–ª–∞—Ç—å—è:")
        await state.set_state(DressStates.waiting_for_name)
    elif action == "no":
        await callback.message.edit_text("–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.\n–¢—É—Ç –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ–¥–µ–∂–¥—ã\n–ù–∞–∑–≤–∞–Ω–∏–µ:\n[—Ü–≤–µ—Ç] –ø–ª–∞—Ç—å–µ [–¥–∞—Ç–∞]")
    await callback.answer()

# –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–∞—Ç—å—è
@dp.message(DressStates.waiting_for_name)
async def process_dress_name(message: types.Message, state: FSMContext):
    new_name = message.text
    await message.answer(f"–ò–º—è –ø–ª–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è"
@dp.message(F.text == "–ò—Å—Ç–æ—Ä–∏—è")
async def handle_history(message: types.Message):
    buttons = [
        [types.InlineKeyboardButton(text="–°–∏–Ω–µ–µ –ø–ª–∞—Ç—å–µ 04.10", callback_data="num_finish")],
        [types.InlineKeyboardButton(text="–ó–µ–ª–µ–Ω–æ–µ –ø–ª–∞—Ç—å–µ 30.01", callback_data="num_finish")],
        [types.InlineKeyboardButton(text="–ö—Ä–∞—Å–Ω–æ–µ –ø–ª–∞—Ç—å–µ 28.03", callback_data="num_finish")],
        [types.InlineKeyboardButton(text="–¢—É–º–±–∞-—é–º–±–∞", callback_data="num_finish")],
        [types.InlineKeyboardButton(text="–ü–ª–∞—Ç—å–µ 1", callback_data="num_finish")],
        [
            types.InlineKeyboardButton(text="‚óÄ", callback_data="num_decr"),
            types.InlineKeyboardButton(text="‚ñ∂", callback_data="num_incr")
        ]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ø–∑—ã–∫"
@dp.message(F.text == "–Ø–∑—ã–∫")
async def handle_language(message: types.Message):
    buttons = [
        [types.InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lan_ru")],
        [types.InlineKeyboardButton(text="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß", callback_data="lan_en")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ —è–∑—ã–∫–∞
@dp.callback_query(F.data.startswith("lan_"))
async def handle_language_callback(callback: types.CallbackQuery):
    action = callback.data.split("_")[1]
    if action == "ru":
        await callback.message.edit_text("–¢–µ–ø–µ—Ä—å —è–∑—ã–∫ —Ä—É—Å—Å–∫–∏–π")
    elif action == "en":
        await callback.message.edit_text("–¢–µ–ø–µ—Ä—å —è–∑—ã–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer("–≠—Ç–æ –º–µ–Ω—é –ø–æ–º–æ—â–∏! –¢—É—Ç –±—É–¥—É—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")